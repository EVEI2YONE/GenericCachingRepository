Layer1 = 2 or 3
Layer2a = A and B and C
Layer2b = 3
Layer3
(A and B and C) or ((B and D and E) and (F or G or H))
1: 2 or 3
2: 4 and C
4: A and B
2: (A and B) and C
1: ((A and B) and C) or 3
3: 5 and 6
5: 7 and E
7: B and D
5: (B and D) and E
3: ((B and D) and E) and 6
6: 8 or H
8: F or G
6: (F or G) or H
3: ((B and D) and E) and ((F or G) or H)
1: ((A and B) and C) or (((B and D) and E) and ((F or G) or H))
((A and B) and C) or (((B and D) and E) and ((F or G) or H))

Input:
{
    Expressions:
    [
    {
        Name: 0
        Expression: 1 or 2
    },
    {
        Name: 1
        Expression: 11 OR C
    },
    {
        Name: 11
        Expression: A and B
    },
    {
        Name: 2
        Expression: 21 and 22
    },
    {
        Name: 21
        Expression: 211 and E
    },
    {
        Name: 211
        Expression: B and D
    },
    {
        Name: 22
        Expression: 221 or H
    },
    {
        Name: 221
        Expression: F or G
    }
    ],
    Rules
    [
    {
        Name: C
        Rule: UserName contains 'Rose'
    },
    {
        Name: A
        Rule: UserID > 3
    },
    {
        Name: B
        Rule: UserID < 500
    },
    {
        Name: E
        Rule: UserRole == 'User'
    },
    {
        Name: D
        Rule: UserID % 2 == 0
    },
    {
        Name: H
        Rule: UserRole == 'Moderator'
    },
    {
        Name: F
        Rule: UserAge < 18
    },
    {
        Name: G
        Rule: UserAge > 65
    }
    ]
}

Output:
0  : 1 or 2
0  : 2 and 3 {0 is already defined}
1  : 11 or C
5  : 11 or C {1 = 5}, {registered alias}
7  : 5 or C  => 7: 1 or C {5 => 1} {substitute and map expressions}
11 : !A and B
2  : 21 and 22
21 : 211 and E
211: B and D
22 : 221 or H
221: F or G
LK: F or G, {221 = LK}, {implicit duplicate expression}

Disjoint Tree 1
A : 1 or 2
1 : B or C

Disjoint Tree 2
D : E or F

Connected Trees 1 and 2 {B => D}
B : C and D



C: UserName contains 'Rose'
A: UserID > 3
B: UserID < 500
E: UserRole == 'User'
D: UserID % 2 == 0
H: UserRole == 'Moderator'
F: UserAge < 18
G: UserAge > 65

0  : (((UserID > 3) and (UserID < 500)) or (UserName contains 'Rose')) or ((((UserID < 500) and (UserID % 2 == 0)) and (UserRole == 'User')) and (((UserAge < 18) or (UserAge > 65)) or (UserRole == 'Moderator')))
1  : ((UserID > 3) and (UserID < 500)) or (UserName contains 'Rose')
11 : (UserID > 3) and (UserID < 500)
2  : (((UserID < 500) and (UserID % 2 == 0)) and (UserRole == 'User')) and (((UserAge < 18) or (UserAge > 65)) or (UserRole == 'Moderator'))
21 : ((UserID < 500) and (UserID % 2 == 0)) and (UserRole == 'User')
211: (UserID < 500) and (UserID % 2 == 0)
22 : ((UserAge < 18) or (UserAge > 65)) or (UserRole == 'Moderator')
221: (UserAge < 18) or (UserAge > 65)


0  : Expr(1) or Expr(2)
1  : Expr(11) or EvalRule(C)
11 : EvalRule(A) and EvalRule(B)
2  : Expr(21) and Expr(22)
21 : Expr(211) and EvalRule(E)
211: EvalRule(B) and EvalRule(D)
22 : Expr(221) or EvalRule(H)
221: EvalRule(F) or EvalRule(G)

Convert
Filter JSON <==> (Expression/Rule) notation
